/**
 * Copyright (c) 2012 EastNets
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of EastNets ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with EastNets. 
 */

package com.eastnets.service.security;

import java.util.List;

import com.eastnets.common.exception.WebClientException;
import com.eastnets.dao.security.data.SecurityDataBean;
import com.eastnets.domain.Pair;
import com.eastnets.domain.admin.Profile;
import com.eastnets.domain.admin.ProfileDetails;
import com.eastnets.domain.admin.User;
import com.eastnets.domain.admin.User.LoginStatus;
import com.eastnets.service.common.PasswordChangeStatus;
import com.eastnets.service.common.PasswordExpirationStatus;

/**
 * Security Service Interface
 * 
 * @author EastNets
 * @since July 15, 2012
 */
public interface SecurityService {

	/**
	 * Authenticate user
	 * 
	 * @param user
	 * @return User
	 * @throws WebClientException
	 */
	public User authenticate(User user, String authenticationMethod, boolean enableLdapCaseInsensitive) throws Exception;

	/**
	 * Change user password
	 * 
	 * @param user
	 * @param newUserPassword
	 * @param authenticationMethod
	 * @return change status
	 * @throws Exception
	 */
	public PasswordChangeStatus changeUserPassword(User user, String newUserPassword, String authenticationMethod, boolean enableLdapCaseInsensitive) throws Exception;

	public boolean isUserApproved(String user) throws WebClientException;

	public String getUserApprovalDescription(String user) throws WebClientException;

	public void updateLastLogin(String username, long userId, boolean isDBUser, String type);

	public void updateSecretKey(String username, String secretKey);

	public String resetUserPassword(String userName, User currentUser, String authenticationMethod);

	public String generateAndValidatePassword(String username, String passwordUsername);

	public boolean isAutogenerationPasswordExpired(String loggedInUsername, long userId, int userType);

	public Pair<PasswordExpirationStatus, Integer> getPasswordExpirationStatus(String loggedInUsername, long userId, int userType);

	public String getSecretKey(String username);

	public boolean isAutoGeneratedPassword(String username, Long userId, int userType);

	public User validateUserLoginStatus(User user);

	public User getLastLogIn(String userName);

	public void setTOTPRoles(User user);

	/**
	 * Get profile details by profile name
	 * 
	 * @param loggedInUser
	 * @param profile
	 * @return ProfileDetails
	 */
	public ProfileDetails getProfileDetails(String loggedInUser, Profile profile);

	/**
	 * gets the details of the profiles passed
	 * 
	 * @param userName
	 * @param profiles
	 * @return
	 */
	public List<ProfileDetails> getProfileDetails(String userName, List<Profile> profiles);

	public User getNumberOfPasswordAttempts(String userName);

	public void updateNumberOfPasswordAttempts(String userName, Long userId, int curuntAttemptsNumber);

	public void makeUserDisabel(String userName, Long userId, int curuntAttemptsNumber);

	public List<String> getProfileRoles(Long profileID);

	public LoginStatus getLoginStatus(User user);

	public List<String> getBIAuthrizationList(Long profileID);

	public String getUserSalt(User user);
	
	public void fillSecurityDataBean(SecurityDataBean securityDataBean);
	
	public void fillLoggedInUserName(String loggedInUser);

}
