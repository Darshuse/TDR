/**
 * Copyright (c) 2012 EastNets
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of EastNets ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with EastNets. 
 */

package com.eastnets.dao.security;

import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import com.eastnets.domain.Pair;
import com.eastnets.domain.admin.Action;
import com.eastnets.domain.admin.BICPerProfile;
import com.eastnets.domain.admin.MsgCatPerProfile;
import com.eastnets.domain.admin.UnitPerProfile;
import com.eastnets.domain.admin.User;
import com.eastnets.domain.security.PasswordPolicy;
import com.eastnets.domain.security.UserApprovalStatusInfo;

/**
 * Security DAO Interface
 * @author EastNets
 * @since July 15, 2012
 */
public interface SecurityDAO {
	public void authenticate(User user) throws SQLException;
	public void fillUserRoles(User user) throws SQLException;
	public void changeUserDBPassword(String userName,String newUserPassword, boolean unlockUser) throws SQLException;
	public UserApprovalStatusInfo checkUserApproval(String username) throws SQLException;
	public UserApprovalStatusInfo getUserApprovedStatus() throws SQLException;
	public List<Pair<String, String>> getRoles();
	public List<Pair<String, String>> getRoleDisplayNames(List<String> roles);
	public List<String> getProfileRoles(Long profileID);
	public void removeProfileRoles(Long profileId);
	public void setProfileRoles(Long profileId, List<String> profileRoles);
	public boolean authenticateReportingUser(User user);
	public void setReportingUserPassword(User user);
	public void deleteUserPasswords(User user);
	public void resetSecretKey(User user);
	public void updateLastLogin(long userId,boolean isDBUser,String type);
	public void updateSecretKey(String username,String secretKey);
	public PasswordPolicy getPasswordPolicy();
	public void resetPassword(String userName, String newUserPassword, boolean unlockUser) throws SQLException;
	public String getSecretKey(String username);
	public void updatePasswordPolicy(PasswordPolicy policy);

	public Date getPasswordResetDate(long userId, int userType);
	public boolean checkReportingUserPasswordUsed(Long userId, String password, int passwordHistoryLenght);

	public boolean isAutoGeneratedPassword(Long userId, int userType);
	


	/**
	 * Get BICs per profile, if isSelectedBic is true then it will returns the selected bics for that profile otherwise it will return unselected bics
	 * @param profileId
	 * @param isSelectedBIC
	 * @return List<BICPerProfile>
	 */
	public List<BICPerProfile> getBICsPerProfile(Long profileId, Integer isSelectedBIC);

	/**
	 * Get units per profile, if isSelectedUnit is true it will return the assigned unit to that profile only otherwise it will return that unassigned units
	 * @param profileId
	 * @param isSelectedUnit
	 * @return <UnitPerProfile>
	 */
	public List<UnitPerProfile> getUnitsPerProfile(Long profileId, Integer isSelectedUnit);
	
	/**
	 * Get message category per profile,if isSelectedMsgCat is true it will return the assigned categories to that profile only otherwise it will return that unassigned categories
	 * @param profileId
	 * @param isSelectedMsgCat
	 * @return
	 */
	public List<MsgCatPerProfile> getMsgCatPerProfile(Long profileId, Integer isSelectedMsgCat);

	/**
	 * Get authorized actions for certain profile
	 * @param moduleId
	 * @param profileId
	 * @return List<Action> 
	 */
	public List<Action> getAuthorizedActions(Integer moduleId, Long profileId);
	
	public User getLastLogIn(String userName);
	public User getNumberOfPasswordAttempts(String userName);

	public void updateNumberOfPasswordAttempts(String userName,Long userId,int curuntAttemptsNumber);
	public void makeUserDisabel(String userName,Long userId,int curuntAttemptsNumber);
	public String getUserSalt(User user);

}
