/**
 * 
 */
package com.eastnets.dao.security;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;

import com.eastnets.domain.admin.User;

/**
 * 
 * @author EastNets
 * @since dNov 1, 2012
 * 
 */
public class SecurityOracleDAOImp extends SecurityDAOImp {
	/**
	 * 
	 */
	private static final long serialVersionUID = -1851067607758760033L;

	@Override
	public void fillUserRoles(User user) throws SQLException {

		List<Object> parameters = new ArrayList<>();
		parameters.add(user.getUserName().toUpperCase());
		String queryText = "SELECT  u.USERNAME AS USERNAME, r.ROLE_NAME AS GRANTED_ROLE FROM SUSER u, SGRANTEDROLES r WHERE USERNAME = ? AND u.GROUPID = r.GROUP_ID";

		List<String> roles = jdbcTemplate.query(queryText, parameters.toArray(), new RowMapper<String>() {

			@Override
			public String mapRow(ResultSet rs, int rownum) throws SQLException {
				return rs.getString("GRANTED_ROLE");
			}

		});
		user.setUserRolesOld(roles);
	}

	@Override
	public void changeUserDBPassword(String userName, String newUserPassword, boolean unlockUser) throws SQLException {

		String query = "ALTER USER \"" + userName.trim().toUpperCase() + "\" IDENTIFIED BY \"" + newUserPassword.trim() + "\" ";
		if (unlockUser) {
			query += " Account unlock ";
		}
		getJdbcTemplate().update(query);
		super.changeUserDBPassword(userName, newUserPassword, unlockUser);
	}

	@Override
	public void resetPassword(String userName, String newUserPassword, boolean unlockUser) throws SQLException {
		String query = "ALTER USER \"" + userName.trim().toUpperCase() + "\" IDENTIFIED BY \"" + newUserPassword.trim() + "\" ";
		if (unlockUser) {
		}
		getJdbcTemplate().update(query);
		super.resetPassword(userName, newUserPassword, unlockUser);
	}

	@Override
	public boolean authenticateReportingUser(User user) {

		List<Object> parameters = new ArrayList<>();
		parameters.add(user.getUserName());

		String query = "select sUser.USERID from" + " suser inner join"
				+ " ( select * from ( select * from sUserPasswords where userid = (select userid from suser where username = ? ) order by PASSWORD_DATE desc ) sUserPasswords  where rownum = 1 ) sUserPasswords"
				+ " on  sUserPasswords.USERID = sUser.USERID" + " where sUserPasswords.password = ? ";

		String password = null;
		if (user.getSalt() == null || user.getSalt().trim().isEmpty()) {
			password = user.getPasswordEncrypted().toString();
		} else {
			password = user.getHashedPassword();
		}
		parameters.add(password);

		Boolean found = getJdbcTemplate().query(query, parameters.toArray(), new ResultSetExtractor<Boolean>() {

			@Override
			public Boolean extractData(ResultSet rs) throws SQLException, DataAccessException {
				if (rs.next()) {
					return true;
				}
				return false;
			}
		});

		return found.booleanValue();
	}

	@Override
	public boolean checkReportingUserPasswordUsed(Long userId, String password, int passwordHistoryLenght) {
		String query = "select * from ( select * from ( select * from sUserPasswords where UserID = ? and AutoGenerated = 0 order by PASSWORD_DATE desc ) sUserPasswords  where rownum <= ? ) sUserPasswords where password = ?";

		Boolean found = getJdbcTemplate().query(query, new Object[] { userId, passwordHistoryLenght, password }, new ResultSetExtractor<Boolean>() {
			@Override
			public Boolean extractData(ResultSet rs) throws SQLException, DataAccessException {
				if (rs.next()) {
					return true;
				}
				return false;
			}
		});
		return found.booleanValue();
	}

	@Override
	public void resetSecretKey(User user) {
		String query = "update sUser set secretKey = null where username = ?";
		getJdbcTemplate().update(query, user.getUserName());

	}

	@Override
	public String getUserSalt(User user) {

		String query = "SELECT SALT SALT FROM(select SALT from sUserPasswords where userid = (select userid from suser where UPPER(username) = UPPER('" + user.getUserName().replace("'", "''") + "')) ORDER BY password_date desc) WHERE ROWNUM <=1";

		return jdbcTemplate.query(query, new ResultSetExtractor<String>() {

			@Override
			public String extractData(ResultSet rs) throws SQLException, DataAccessException {
				return rs.next() ? rs.getString("SALT") : null;
			}
		});
	}

}
