/**
 * Copyright (c) 2012 EastNets
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of EastNets ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * you entered into with EastNets. 
 */

package com.eastnets.domain.admin;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.apache.commons.lang3.builder.DiffBuilder;
import org.apache.commons.lang3.builder.DiffResult;
import org.apache.commons.lang3.builder.Diffable;
import org.ocpsoft.pretty.time.PrettyTime;

import com.eastnets.dao.common.Constants;
import com.eastnets.dao.commonUtilities.HashingUtility;
import com.eastnets.domain.BaseEntity;
import com.eastnets.encdec.AESEncryptDecrypt;

/**
 * User POJO
 * 
 * @author EastNets
 * @since September 2, 2012
 */
public class User extends BaseEntity implements Comparable<User>, Diffable<User> {
	/**
	 * 
	 */
	private static final long serialVersionUID = -3089967499757514971L;

	public static final int AUTH_REPORTING = 0;
	public static final int AUTH_LDAP = 1;
	public static final int AUTH_DB = 2;
	public static final int AUTH_RADIUS = 3;
	public static final int AUTH_STRONG = 4;
	public static final int AUTH_REPORTING_TOTP = 5;

	private Long userId;
	private String userName;
	private String password;
	private String validationKey = "";
	private String confirmedPassword;
	private Long vwListDepth;
	private Long wdNbDayHistory;
	private String rpDirectory;
	private String email;
	private String error;
	private String fullUserName;
	private String secretKey;
	private boolean isAuthenticated;

	private Long connectionTimeOut;
	private Profile profile;
	private ApprovalStatus approvalStatus = new ApprovalStatus();

	private List<String> userRolesOld = new ArrayList<String>();
	private boolean databaseUserOld;
	private boolean deleteFromDatabase;

	private Integer authenticationMethod = AUTH_REPORTING;
	private boolean disabled;
	private Date lastLoginDays;
	private String lastLoginDaysString;
	private boolean changePassword;
	private Double passwordResetDays;

	private boolean canRunLoader;
	private boolean hasSession;
	private boolean createOnDatabase = true;
	private boolean autoGeneratedPassword = false;
	private boolean grantRecoveryRole = false;

	private Date expirationDate;
	private Double expirationDays;
	private Date activationDate;
	private DormancyStatus dormancyStatus;
	private Integer authenticator = -1;
	private LoginStatus loginStatus;

	private Integer sessionTimeOutWarning;
	private Integer sessionTimeOutCountDown;

	private String authenticatorAsString;
	private int numberPasswordAttempts;
	private int passwordPolacyAttempts;
	private String ipAddress;
	private String hashedPassword;
	private String salt;
	private Integer groupId;

	private PrettyTime p = new PrettyTime(Locale.ENGLISH);

	public enum LoginStatus {
		LOGIN_SUCCESS, LOGIN_FAIL, LOGIN_AUTHENTICATION_FAILED, LOGIN_LICENSE_NO_MORE_USERS, LOGIN_USER_NOT_APPROVED, LOGIN_ALREAD_HAS_SESSION, SESSION_MAPPED_TO_OTHER_USER, LOGIN_USER_DISABLED, LOGIN_USER_EXPIRED, LOGIN_PASSWORD_EXPIRED, AUTOGENERATED_PASSWORD_EXPIRED, OVERRIDE_ATTEMPTS, TWO_FACTOR, TWO_FACTOR_AUTH, SESSION_REGISTERED, LOGIN_STOPPED;
	}

	public enum DormancyStatus {

		ACTIVE(1), REACTIVATED(2), DORMANT(3);

		private int value;

		DormancyStatus(int value) {
			this.value = value;
		}

		public int getValue() {
			return value;
		}

		public static DormancyStatus statusByValue(int value) {
			switch (value) {
			case 1:
				return ACTIVE;
			case 2:
				return REACTIVATED;
			case 3:
				return DORMANT;
			default:
				return ACTIVE;
			}
		}

	}

	public User() {
		profile = new Profile();
	}

	public User(String userName) {
		super();
		this.userName = userName;

		profile = new Profile();
		approvalStatus = new ApprovalStatus();

	}

	public Long getUserId() {
		return userId;
	}

	public void setUserId(Long userId) {
		this.userId = userId;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		if (userName == null || userName.trim().equals("")) {
			userName = null;
		}
		this.userName = userName;
	}

	public Long getVwListDepth() {
		return vwListDepth;
	}

	public void setVwListDepth(Long vwListDepth) {
		this.vwListDepth = vwListDepth;
	}

	public Long getWdNbDayHistory() {
		return wdNbDayHistory;
	}

	public void setWdNbDayHistory(Long wdNbDayHistory) {

		this.wdNbDayHistory = wdNbDayHistory;
	}

	public String getRpDirectory() {
		return rpDirectory;
	}

	public void setRpDirectory(String rpDirectory) {
		if (rpDirectory == null || rpDirectory.trim().equals("")) {
			rpDirectory = null;
		}
		this.rpDirectory = rpDirectory;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		if (email == null || email.trim().equals("")) {
			email = null;
		}
		this.email = email;
	}

	public String getError() {
		return error;
	}

	public void setError(String error) {
		this.error = error;
	}

	public Long getConnectionTimeOut() {
		return connectionTimeOut;
	}

	public void setConnectionTimeOut(Long connectionTimeOut) {
		this.connectionTimeOut = connectionTimeOut;
	}

	public String getFullUserName() {
		return fullUserName;
	}

	public void setFullUserName(String fullUserName) {
		if (fullUserName == null || fullUserName.trim().equals("")) {
			fullUserName = null;
		}
		this.fullUserName = fullUserName;
	}

	public Profile getProfile() {
		return profile;
	}

	public void setProfile(Profile profile) {
		this.profile = profile;
	}

	public ApprovalStatus getApprovalStatus() {
		return approvalStatus;
	}

	public void setApprovalStatus(ApprovalStatus approvalStatus) {
		this.approvalStatus = approvalStatus;
	}

	public String getPassword() {
		if (password == null || password.isEmpty()) {
			password = null;
		}
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getValidationKey() {
		if (validationKey == null || validationKey.isEmpty()) {
			password = null;
		}
		return validationKey;
	}

	public void setValidationKey(String validationKey) {
		this.validationKey = validationKey;
	}

	public boolean isDatabaseUserOld() {
		return databaseUserOld;
	}

	public void setDatabaseUserOld(boolean databaseUser) {
		this.databaseUserOld = databaseUser;
	}

	public String getConfirmedPassword() {
		return confirmedPassword;
	}

	public void setConfirmedPassword(String confirmedPassword) {
		if (confirmedPassword == null || confirmedPassword.trim().equals("")) {
			confirmedPassword = null;
		}
		this.confirmedPassword = confirmedPassword;
	}

	public boolean isDeleteFromDatabase() {
		return deleteFromDatabase;
	}

	public void setDeleteFromDatabase(boolean deleteFromDatabase) {
		this.deleteFromDatabase = deleteFromDatabase;
	}

	@Override
	public boolean equals(Object obj) {

		boolean isEqual = false;

		if (obj != null) {
			User currentUser = (User) obj;

			if (userName.trim().equalsIgnoreCase(currentUser.getUserName().trim()))
				isEqual = true;
		}

		return isEqual;
	}

	public boolean isLsaApproved() {

		return this.approvalStatus.id == Constants.LSA_APPROVED_WAITING_RSA_APPROVAL;
	}

	public boolean isRsaApproved() {

		return this.approvalStatus.id == Constants.RSA_APPROVED_WAITING_LSA_APPROVAL;
	}

	public LoginStatus getLoginStatus() {
		return loginStatus;
	}

	public void setLoginStatus(LoginStatus loginStatus) {
		this.loginStatus = loginStatus;
	}

	@Override
	public int compareTo(User o) {

		if (o == null) {
			return 1;
		}

		if (this.userId != o.userId) {
			if (this.userId != null && !this.userId.equals(o.userId)) {
				return -1;
			} else if (o.userId != null && !o.userId.equals(this.userId)) {
				return 1;
			}
		}

		if (this.password != o.password) {
			this.password = this.password.isEmpty() ? null : this.password;
			if (this.password != null && !this.password.equals(o.password)) {
				return -1;
			} else if (o.password != null && !o.password.equals(this.password)) {
				return 1;
			}
		}
		if (this.confirmedPassword != o.confirmedPassword) {
			if (this.confirmedPassword != null && !this.confirmedPassword.equals(o.confirmedPassword)) {
				return -1;
			} else if (o.confirmedPassword != null && !o.confirmedPassword.equals(this.confirmedPassword)) {
				return -1;
			}
		}
		if (this.vwListDepth != o.vwListDepth) {
			if (this.vwListDepth != null && !this.vwListDepth.equals(o.vwListDepth)) {
				return -1;
			} else if (o.vwListDepth != null && !o.vwListDepth.equals(this.vwListDepth)) {
				return 1;
			}
		}
		if (this.wdNbDayHistory != o.wdNbDayHistory) {
			if (this.wdNbDayHistory != null && !this.wdNbDayHistory.equals(o.wdNbDayHistory)) {
				return -1;
			} else if (o.wdNbDayHistory != null && !o.wdNbDayHistory.equals(this.wdNbDayHistory)) {
				return 1;
			}
		}
		if (this.rpDirectory != o.rpDirectory) {
			if (this.rpDirectory != null && !this.rpDirectory.equals(o.rpDirectory)) {
				return -1;
			} else if (o.rpDirectory != null && !o.rpDirectory.equals(this.rpDirectory)) {
				return 1;
			}
		}
		if (this.email != o.email) {
			if (this.email != null && !this.email.equals(o.email)) {
				return -1;
			} else if (o.email != null && !o.email.equals(this.email)) {
				return 1;
			}
		}

		if (this.fullUserName != o.fullUserName) {
			if (this.fullUserName != null && !this.fullUserName.equals(o.fullUserName)) {
				return -1;
			} else if (o.fullUserName != null && !o.fullUserName.equals(this.fullUserName)) {
				return 1;
			}
		}

		if (this.connectionTimeOut != o.connectionTimeOut) {
			if (this.connectionTimeOut != null && !this.connectionTimeOut.equals(o.connectionTimeOut)) {
				return -1;
			} else if (o.connectionTimeOut != null && !o.connectionTimeOut.equals(this.connectionTimeOut)) {
				return 1;
			}
		}
		if (this.profile != null && this.profile != o.profile) {

			int compareTo = this.profile.compareTo(o.profile);
			if (compareTo != 0) {
				return compareTo;
			}
		}

		if (this.approvalStatus != o.approvalStatus) {
			if (this.approvalStatus != null && !this.approvalStatus.equals(o.approvalStatus)) {
				return -1;
			} else if (o.approvalStatus != null && !o.approvalStatus.equals(this.approvalStatus)) {
				return 1;
			}
		}

		/*
		 * added by Mohammmad Alzarai 2016-03-17 change user type user story
		 */

		if (this.authenticationMethod != o.authenticationMethod) {
			if (this.authenticationMethod != null && this.authenticationMethod.equals(o.authenticationMethod)) {
				return -1;
			} else if (o.authenticationMethod != null && !o.authenticationMethod.equals(this.authenticationMethod)) {
				return 1;
			}
		}
		// ignore the authenticationMethod cause it cannot be modified

		if (this.userRolesOld != o.userRolesOld) {
			if (this.userRolesOld != null && !this.userRolesOld.equals(o.userRolesOld)) {
				return -1;
			} else if (o.userRolesOld != null && !o.userRolesOld.equals(this.userRolesOld)) {
				return 1;
			}
		}

		if (this.canRunLoader != o.canRunLoader) {
			return -1;
		}
		if (this.authenticator != o.authenticator) {
			return -1;
		}

		if (this.expirationDate != o.expirationDate) {
			if (this.expirationDate != null && o.expirationDate != null) {
				if (this.expirationDate.getTime() > o.expirationDate.getTime()) {
					return 1;
				}
				if (this.expirationDate.getTime() < o.expirationDate.getTime()) {
					return -1;
				}
			} else if (this.expirationDate != null) {
				return -1;
			} else if (o.expirationDate != null) {
				return -1;
			}
		}

		return 0;
	}

	public boolean isCanRunLoader() {
		return canRunLoader;
	}

	public void setCanRunLoader(boolean canRunLoader) {
		this.canRunLoader = canRunLoader;
	}

	public boolean getCanRunLoader() {
		return canRunLoader;
	}

	public List<String> getUserRolesOld() {
		return userRolesOld;
	}

	public void setUserRolesOld(List<String> userRoles) {
		if (userRoles == null || userRoles.isEmpty()) {
			return;
		}
		this.userRolesOld = userRoles;
		Collections.sort(this.userRolesOld);
	}

	public boolean isHasSession() {
		return hasSession;
	}

	public void setHasSession(boolean hasSession) {
		this.hasSession = hasSession;
	}

	public Integer getAuthenticationMethod() {
		return authenticationMethod;
	}

	public void setAuthenticationMethod(Integer authenticationMethod) {
		this.authenticationMethod = authenticationMethod;
	}

	public boolean isDisabled() {
		return disabled;
	}

	public void setDisabled(boolean disabled) {
		this.disabled = disabled;
	}

	public Date getLastLoginDays() {
		return lastLoginDays;
	}

	public String getLastLoginDaysAsString() {
		if (lastLoginDays == null) {
			return "";
		}
		return p.format(lastLoginDays);
	}

	public void setLastLoginDays(Date lastLoginDays) {
		this.lastLoginDays = lastLoginDays;
	}

	// public String getLastLoginDaysStr() {
	// if (lastLoginDays == null){
	// return "-";
	// }
	// int days= lastLoginDays.intValue();
	// Double remaining = ( lastLoginDays - days ) * 24;
	// int hours = remaining.intValue();
	// remaining = ( remaining - hours ) * 60;
	// int minutes = remaining.intValue();
	// return String.format("%02d day(s) %02d:%02d", days, hours, minutes);
	// }

	public boolean isChangePassword() {
		return changePassword;
	}

	public void setChangePassword(boolean changePassword) {
		this.changePassword = changePassword;
	}

	public Double getPasswordResetDays() {
		return passwordResetDays;
	}

	public void setPasswordResetDays(Double passwordResetDays) {
		this.passwordResetDays = passwordResetDays;
	}

	public boolean isDatabaseUser() {
		return AUTH_DB == authenticationMethod;
	}

	public boolean isApplicationUser() {
		return AUTH_REPORTING == authenticationMethod || AUTH_REPORTING_TOTP == authenticationMethod;
	}

	public boolean isLdapUser() {
		return AUTH_LDAP == authenticationMethod;
	}

	public boolean isReportingTOTPUser() {
		return AUTH_REPORTING_TOTP == authenticationMethod;
	}

	public boolean isRadiusUser() {
		return AUTH_RADIUS == authenticationMethod;
	}

	public boolean isCreateOnDatabase() {
		return createOnDatabase;
	}

	public void setCreateOnDatabase(boolean createOnDatabase) {
		this.createOnDatabase = createOnDatabase;
		/*
		 * In case the end user don't need to create database user must set auto generated flag to false
		 */
		if (!createOnDatabase) {
			this.autoGeneratedPassword = false;
		}
	}

	public Object getPasswordEncrypted() {
		String passwordEncrypted = password;
		try {
			passwordEncrypted = AESEncryptDecrypt.encryptOneWay(password);
		} catch (Exception ex) {
			System.err.println("Error : could not encrypt password for '" + userName + "', un-encrypted password will be used");
		}
		return passwordEncrypted;
	}

	public String getHashedPassword() {

		String hashedPassword = null;
		try {
			hashedPassword = HashingUtility.getHashedPassword(password, salt.getBytes());
		} catch (Exception ex) {
			System.err.println("Error : could not hash password for '" + userName + "', un-hashed password will be used");
		}
		return hashedPassword;
	}

	public void setHashedPassword(String hashedPassword) {
		this.hashedPassword = hashedPassword;
	}

	public boolean isAutoGeneratedPassword() {
		return autoGeneratedPassword;
	}

	public void setAutoGeneratedPassword(boolean autoGeneratedPassword) {
		this.autoGeneratedPassword = autoGeneratedPassword;
	}

	public Date getExpirationDate() {
		return expirationDate;
	}

	public void setExpirationDate(Date expirationDate) {
		this.expirationDate = expirationDate;
	}

	public Double getExpirationDays() {
		return expirationDays;
	}

	public void setExpirationDays(Double expirationDays) {
		this.expirationDays = expirationDays;
	}

	public Integer getAuthenticator() {
		return authenticator;
	}

	public String getAuthenticatorAsString() {

		String value = null;

		switch (authenticator) {
		case -1:
			value = "-";
			break;
		case 1:
			value = "LSA";
			break;
		case 2:
			value = "RSA";
			break;
		default:
			break;
		}
		this.authenticatorAsString = value;
		return authenticatorAsString;
	}

	public void setAuthenticator(Integer authenticator) {
		this.authenticator = authenticator;
	}

	public Integer getSessionTimeOutWarning() {
		return sessionTimeOutWarning;
	}

	public void setSessionTimeOutWarning(Integer sessionTimeOutWarning) {
		this.sessionTimeOutWarning = sessionTimeOutWarning;
	}

	public Integer getSessionTimeOutCountDown() {
		return sessionTimeOutCountDown;
	}

	public void setSessionTimeOutCountDown(Integer sessionTimeOutCountDown) {
		this.sessionTimeOutCountDown = sessionTimeOutCountDown;
	}

	public Date getActivationDate() {
		return activationDate;
	}

	public void setActivationDate(Date activationDate) {
		this.activationDate = activationDate;
	}

	public DormancyStatus getDormancyStatus() {
		return dormancyStatus;
	}

	public void setDormancyStatus(DormancyStatus dormancyStatus) {
		this.dormancyStatus = dormancyStatus;
	}

	public boolean isGrantRecoveryRole() {
		return grantRecoveryRole;
	}

	public void setGrantRecoveryRole(boolean grantRecoveryRole) {
		this.grantRecoveryRole = grantRecoveryRole;
	}

	public void setAuthenticatorAsString(String authenticatorAsString) {
		this.authenticatorAsString = authenticatorAsString;
	}

	public int getNumberPasswordAttempts() {
		return numberPasswordAttempts;
	}

	public void setNumberPasswordAttempts(int numberPasswordAttempts) {
		this.numberPasswordAttempts = numberPasswordAttempts;
	}

	public String getSecretKey() {
		return secretKey;
	}

	public void setSecretKey(String secretKey) {
		this.secretKey = secretKey;
	}

	public boolean isAuthenticated() {
		return isAuthenticated;
	}

	public void setAuthenticated(boolean isAuthenticated) {
		this.isAuthenticated = isAuthenticated;
	}

	@Override
	public DiffResult diff(User oldUse) {
		DiffBuilder compare = new DiffBuilder(this, oldUse, null, false);
		compare.append("Run Loader", this.getCanRunLoader(), oldUse.getCanRunLoader());
		compare.append("Disable user", this.disabled, oldUse.disabled);
		compare.append("Create On Database", this.createOnDatabase, oldUse.createOnDatabase);
		compare.append("User Profile", this.profile.getName(), oldUse.profile.getName());
		compare.append("Authinication method", this.authenticationMethod, oldUse.authenticationMethod);
		compare.append("User Name", this.userName, oldUse.userName);
		compare.append("User Expiration Date", this.expirationDate, oldUse.expirationDate);
		compare.append("User Email", this.email, oldUse.email);
		compare.append("User Directory", this.rpDirectory, oldUse.rpDirectory);
		compare.append("Full User Name", this.fullUserName, oldUse.fullUserName);

		return compare.build();

	}

	public String getIpAddress() {
		return ipAddress;
	}

	public void setIpAddress(String ipAddress) {
		this.ipAddress = ipAddress;
	}

	public int getPasswordPolacyAttempts() {
		return passwordPolacyAttempts;
	}

	public void setPasswordPolacyAttempts(int passwordPolacyAttempts) {
		this.passwordPolacyAttempts = passwordPolacyAttempts;
	}

	public String getSalt() {
		return salt;
	}

	public void setSalt(String salt) {
		this.salt = salt;
	}

	public Integer getGroupId() {
		return groupId;
	}

	public void setGroupId(Integer groupId) {
		this.groupId = groupId;
	}

	public String getLastLoginDaysString() {
		return lastLoginDaysString;
	}

	public void setLastLoginDaysString(String lastLoginDaysString) {
		this.lastLoginDaysString = lastLoginDaysString;
	}

}
